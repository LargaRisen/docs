import{_ as i,c as s,o as a,a4 as t}from"./chunks/framework.E4YCCYO0.js";const F=JSON.parse('{"title":"Git","description":"","frontmatter":{},"headers":[],"relativePath":"notes/git.md","filePath":"notes/git.md","lastUpdated":1716892724000}'),e={name:"notes/git.md"},p=t(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><h2 id="基础命令" tabindex="-1">基础命令 <a class="header-anchor" href="#基础命令" aria-label="Permalink to &quot;基础命令&quot;">​</a></h2><ul><li><p><code>git init</code> - 初始化仓库</p></li><li><p><code>git clone</code> - 拷贝远程仓库</p><p>（如果要自定义文件夹名，可以在后面加上文件夹名）</p></li><li><p><code>git status</code> - <strong>显示变更</strong></p></li><li><p><code>git diff</code> - <strong>显示变更内容</strong></p></li><li><p><code>git log</code> - 查看提交历史</p></li><li><p><code>git add .</code> - 添加文件到暂存区</p></li><li><p><code>git commit -m [message]</code> - 提交到仓库，注释为 message</p></li><li><p><code>git restore .</code> - 撤销修改（version 2.23+）</p><p><code>.</code> 表示全部，如果要撤销单个文件可以指定文件名</p><p><code>--hard</code> 可以加上参数，来硬撤回</p></li><li><p><code>git reset</code> - 撤销提交（可以撤销未 commit 的改变）</p><p><code>--soft</code> 可以加上参数，来软撤回</p><p><code>--hard</code> 可以加上参数，来硬撤回</p><p>可以通过<code>fetch</code>和<code>reset</code>来撤销未 pushed 的改变</p></li><li><p><code>git revert [commit_hash]</code> - 撤销某次提交</p><p>会生成一个新的提交，这个提交是对之前提交的撤销</p></li><li><p><code>git switch</code> - 更换分支（version 2.23+）</p><p><code>-c</code> 创建并切换到新分支</p></li><li><p><code>git checkout</code> - 更换分支/创建分支/丢弃修改/切到特定的提交版本</p><p><code>-b [branch name]</code> 如果没有分支则创建</p><p><code>-- [.]/[file_name]</code> 撤销未提交的改变（指定文件名）</p><p><code>[commit_hash_or_tag]</code> 输入 hash 或者 tag 可以切到具体版本</p></li><li><p><code>git merge xxx</code> - 合并 xxx 分支到当前分支</p></li><li><p><code>git push</code> - 推送到远程分支</p><p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p></li><li><p><code>git pull</code> - 拉取远程分支</p><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p><p>（如果远程分支名和本地分支名一样，可以省略&quot;:&lt;本地分支名&gt;&quot;）</p></li><li><p><code>git fetch</code> - 拉取远程分支</p><p>但是不会自动合并，需要手动合并</p></li><li><p><code>git branch</code> - 列出本地分支</p><p><code>-r</code> 列出远程分支</p><p><code>-a</code> 列出本地远程所有分支</p><p><code>[branchname]</code> 创建新的分支</p><p><code>-d [branchname]</code> 删除分支</p></li></ul><h2 id="配置管理" tabindex="-1">配置管理 <a class="header-anchor" href="#配置管理" aria-label="Permalink to &quot;配置管理&quot;">​</a></h2><p>使用 <code>git config</code> 命令可以配置 git 的一些参数，比如用户名、邮箱、代理等。</p><p>Git 的配置分为三个级别：系统(<code>--system</code>)、用户(<code>--global</code>)、仓库(<code>--local</code>)。</p><p>它们的优先级是：仓库 &gt; 用户 &gt; 系统。</p><p>设置为全局，只需要加上 <code>--global</code> 参数即可。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;yourname&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;youremail&quot;</span></span></code></pre></div><p>如果需要查看配置，可以使用 <code>git config --list</code> 命令。</p><p>移除配置可以使用 <code>--unset</code> 参数。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span></span></code></pre></div><h3 id="常用配置" tabindex="-1">常用配置 <a class="header-anchor" href="#常用配置" aria-label="Permalink to &quot;常用配置&quot;">​</a></h3><ul><li><p><code>user.name</code> - 用户名</p></li><li><p><code>user.email</code> - 邮箱</p></li><li><p><code>core.editor</code> - 编辑器</p></li><li><p><code>core.ignorecase</code> - 区分文件名大小写</p></li><li><p><code>core.filemode</code> - 是否检查文件权限（如果 false 忽略文件权限的变化）</p></li><li><p><code>http.proxy</code> - 代理</p></li><li><p><code>http.sslVerify</code> - 是否验证 SSL 证书</p></li></ul><h2 id="案例及技巧" tabindex="-1">案例及技巧 <a class="header-anchor" href="#案例及技巧" aria-label="Permalink to &quot;案例及技巧&quot;">​</a></h2><h3 id="撤销本次修改" tabindex="-1">撤销本次修改 <a class="header-anchor" href="#撤销本次修改" aria-label="Permalink to &quot;撤销本次修改&quot;">​</a></h3><p>最简单的方法就是使用<code>git restore .</code>命令，这个命令会撤销所有的修改。这个需要 git 版本在 2.23+。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>如果是之前的版本，可以使用<code>git checkout -- .</code>命令。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><ul><li><code>.</code> 表示当前目录，如果只想撤销某个文件的修改，可以指定文件名。</li><li>如果没有参数<code>--</code>，后面直接跟具体的文件名，也表示撤销单个文件。</li></ul><h3 id="提交空文件夹到远程仓库" tabindex="-1">提交空文件夹到远程仓库 <a class="header-anchor" href="#提交空文件夹到远程仓库" aria-label="Permalink to &quot;提交空文件夹到远程仓库&quot;">​</a></h3><p>git 默认会忽略空文件夹，如果我们希望提交一些空的文件夹，以达到某种特定的目的，可以用两种方法来实现这个效果：</p><ol><li>为空文件夹添加 <code>.gitkeep</code> 文件(推荐)</li></ol><p>这个文件它本身是没有意义的，git 好像也没有赋予它特殊使命，更像是团队使用者之间的一种约定，仅仅是为了标记这个空的文件夹是需要添加到仓库的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -empty</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {}/.gitkeep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\;</span></span></code></pre></div><ol start="2"><li>为空文件夹添加 <code>.gitignore</code> 文件</li></ol><p>用过 git 的老用户都知道 .gitignore 是为了忽略一些对项目无用的文件而设置的，我们添加这个文件也可以实现这个效果，但是不是最佳的，因此推荐用第一种（因为它本身是有意义的）。</p><h3 id="强制覆盖本地代码-与-git-远程仓库保持一致" tabindex="-1">强制覆盖本地代码（与 git 远程仓库保持一致） <a class="header-anchor" href="#强制覆盖本地代码-与-git-远程仓库保持一致" aria-label="Permalink to &quot;强制覆盖本地代码（与 git 远程仓库保持一致）&quot;">​</a></h3><p>可以使用下列命令实现：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #取回远程库的所有修改；</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin/master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  #指向远程库origin的master</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #把远程库拉取到本地库</span></span></code></pre></div><h3 id="更改-git-代理配置-http-proxy" tabindex="-1">更改 Git 代理配置（http.proxy） <a class="header-anchor" href="#更改-git-代理配置-http-proxy" aria-label="Permalink to &quot;更改 Git 代理配置（http.proxy）&quot;">​</a></h3><p>如果用了科学工具，有时候就需要更改下代理端口，可以通过下面命令来获取当前的 <code>http.proxy</code> 配置：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.proxy</span></span></code></pre></div><p>如果需要修改，则可以这样：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://127.0.0.1:7890</span></span></code></pre></div><p>http://127.0.0.1:7890可以改成你自己的代理服务及端口。</p><p>去掉这个设置：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.proxy</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https.proxy</span></span></code></pre></div><h3 id="git-区分文件名大小写" tabindex="-1">Git 区分文件名大小写 <a class="header-anchor" href="#git-区分文件名大小写" aria-label="Permalink to &quot;Git 区分文件名大小写&quot;">​</a></h3><p>可以通过修改配置来决定是否区分文件名的大小写：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> core.ignorecase</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><p>如果已经提交了，你之后即使在本地更改文件夹大小写，也不影响线上的版本，这在部署时，就很容易出问题。</p><p>所以一定要修改成正确的，解决方法就是通过把要修改的文件夹名改成临时的，提交后，再改回正确的，这样就完成了修改。</p><p><strong>执行命令</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将要修改的文件夹名称改为临时的，比如 Temp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> incorrectFolder</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tempFolder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tempFolder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Temporary folder name change to fix case&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 再将 Temp 改成正确的目录名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tempFolder</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> correctFolder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> correctFolder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Fix folder name case&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 之后提交就能解决问题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BRANCH_NAME</span></span></code></pre></div><h2 id="工具推荐" tabindex="-1">工具推荐 <a class="header-anchor" href="#工具推荐" aria-label="Permalink to &quot;工具推荐&quot;">​</a></h2><h3 id="gitkraken" tabindex="-1">gitkraken <a class="header-anchor" href="#gitkraken" aria-label="Permalink to &quot;gitkraken&quot;">​</a></h3><p>可视化的分支，管理起来非常方便，也支持控制台操作。</p><p>注意免费用户不支持管理私有库。</p><p><a href="https://img.shejibiji.com/2023/02/20/63f37704e4079.png" target="_blank" rel="noreferrer"><img src="https://img.shejibiji.com/2023/02/20/63f37704e4079.png" alt="Ethan_2023-02-20_21-34-03.png"></a></p>`,51),l=[p];function h(n,o,d,k,c,r){return a(),s("div",null,l)}const C=i(e,[["render",h]]);export{F as __pageData,C as default};
