import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.E4YCCYO0.js";const g=JSON.parse('{"title":"HTML","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/html.md","filePath":"frontend/html.md","lastUpdated":1718352634000}'),l={name:"frontend/html.md"},t=e(`<blockquote><p>目前包含了 html，css 以及 js 的内容，由于之前学的时候，也没怎么做笔记，所以这部分内容目前较少，就先不分开了。</p></blockquote><h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h1><h3 id="html-apis" tabindex="-1">HTML APIs <a class="header-anchor" href="#html-apis" aria-label="Permalink to &quot;HTML APIs&quot;">​</a></h3><h4 id="web-storage" tabindex="-1"><a href="https://www.w3schools.com/html/html5_webstorage.asp" target="_blank" rel="noreferrer">Web Storage</a> <a class="header-anchor" href="#web-storage" aria-label="Permalink to &quot;[Web Storage](https://www.w3schools.com/html/html5_webstorage.asp)&quot;">​</a></h4><p>With web storage, web applications can store data locally within the user&#39;s browser.</p><h5 id="the-localstorage-object" tabindex="-1">The localStorage Object <a class="header-anchor" href="#the-localstorage-object" aria-label="Permalink to &quot;The localStorage Object&quot;">​</a></h5><p>对象存储可以一直使用</p><p>The localStorage object stores the data with no expiration date. The data will not be deleted when the browser is closed, and will be available the next day, week, or year.</p><p><strong>Example</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lastname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Smith&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Retrieve</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).innerHTML </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lastname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><p>文字内容元素存在默认宽度<code>min-content</code>，宽度由内容中最长单词来决定（避免单词被拆开）。</p><h2 id="css-选择器" tabindex="-1">CSS 选择器 <a class="header-anchor" href="#css-选择器" aria-label="Permalink to &quot;CSS 选择器&quot;">​</a></h2><p><strong>分组选择器</strong></p><ul><li><code>A,B</code> 选择所有能被列表中的任意一个选择器选中的节点（就是两个都匹配）</li></ul><p><strong>组合器</strong></p><ul><li><code>A B</code> 选择前一个元素的后代节点（A 的子元素 B，不一定是直接子元素）</li><li><code>A &gt; B</code> 选择前一个元素的直接子代节点（A 的子元素 B）</li><li><code>A + B</code> 选择前一个元素的相邻兄弟节点（A 和 B 共享同一个父元素，且 B 紧跟在 A 后面，只选择第一个）</li><li><code>A ~ B</code> 选择前一个元素之后的所有兄弟节点（A 和 B 共享同一个父元素，且 B 在 A 之后）</li></ul><p><strong>伪类</strong></p><ul><li><p><code>:hover</code> 鼠标悬停</p></li><li><p><code>:active</code> 激活状态</p></li><li><p><code>:focus</code> 获得焦点</p></li><li><p><code>:first-child</code> 第一个子元素 父节点下的第一个子元素，且第一个元素类型为指定类型，如果不是指定类型，不会生效）</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;此文本已选中！&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;此文本未选中。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;此文本未被选中：它不是一个 \`p\`。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;此文本未被选中。&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:first-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><code>:last-child</code> 最后一个子元素</p></li><li><p><code>:nth-child(n)</code> 第 n 个子元素</p></li><li><p><code>:nth-child(odd)</code> 奇数子元素</p></li><li><p><code>:nth-child(even)</code> 偶数子元素</p></li><li><p><code>:nth-last-child(n)</code> 倒数第 n 个子元素</p></li><li><p><code>:first-of-type</code> 第一个指定类型的子元素 父节点下的第一个指定类型的子元素，它不一定是第一个子元素，只要是第一个指定类型的子元素即可。</p></li></ul><p><strong>伪元素</strong></p><ul><li><code>::before</code> 在元素内容之前插入内容</li><li><code>::after</code> 在元素内容之后插入内容</li><li><code>::first-line</code> 选择元素的第一行</li><li><code>::first-letter</code> 选择元素的第一个字母</li></ul><p><strong>优先级</strong></p><ul><li><p><code>!important</code> 优先级最高</p></li><li><p><code>伪类</code> &gt; <code>类</code> &gt; <code>标签</code></p></li></ul><h2 id="css-自定义属性" tabindex="-1">CSS 自定义属性 <a class="header-anchor" href="#css-自定义属性" aria-label="Permalink to &quot;CSS 自定义属性&quot;">​</a></h2><p>通过 <code>--</code> 开头的属性名，可以定义自己的 CSS 变量。</p><p>和其他属性一样，自定义属性也是写在规则集之内的，如下：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --main-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#ff0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意，规则集所指定的选择器定义了自定义属性的可见作用域。通常的最佳实践是定义在根伪类 :root 下，这样就可以在 HTML 文档的任何地方访问到它了。</p><p>之后，可以通过 <code>var()</code> 函数来引用这个变量：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--main-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noreferrer">MDN 文档</a></p></blockquote><h2 id="css-布局" tabindex="-1">CSS 布局 <a class="header-anchor" href="#css-布局" aria-label="Permalink to &quot;CSS 布局&quot;">​</a></h2><h3 id="flex" tabindex="-1">Flex <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;Flex&quot;">​</a></h3><h4 id="flex-轴线及容器" tabindex="-1">Flex 轴线及容器 <a class="header-anchor" href="#flex-轴线及容器" aria-label="Permalink to &quot;Flex 轴线及容器&quot;">​</a></h4><p>当使用 flex 布局时，首先想到的是两根轴线 — 主轴和交叉轴。主轴由 <code>flex-direction</code> 定义，另一根轴垂直于它。</p><h5 id="flex-direction" tabindex="-1">flex-direction <a class="header-anchor" href="#flex-direction" aria-label="Permalink to &quot;flex-direction&quot;">​</a></h5><p>定义主轴的方向，可以取 4 个值：</p><ul><li><code>row</code></li><li><code>row-reverse</code></li><li><code>column</code></li><li><code>column-reverse</code></li></ul><h5 id="flex-warp" tabindex="-1">flex-warp <a class="header-anchor" href="#flex-warp" aria-label="Permalink to &quot;flex-warp&quot;">​</a></h5><p>用来实现多行 Flex 容器。</p><ul><li><code>nowrap</code>: 默认值，不会换行</li><li><code>warp</code>: 允许换行</li><li><code>wrap-reverse</code>: 不常用，了解即可</li></ul><h4 id="flex-元素上的属性" tabindex="-1">Flex 元素上的属性 <a class="header-anchor" href="#flex-元素上的属性" aria-label="Permalink to &quot;Flex 元素上的属性&quot;">​</a></h4><h5 id="flex-basis" tabindex="-1">flex-basis <a class="header-anchor" href="#flex-basis" aria-label="Permalink to &quot;flex-basis&quot;">​</a></h5><p>指定 flex 元素在主轴方向上的初始大小。</p><h5 id="flex-grow" tabindex="-1">flex-grow <a class="header-anchor" href="#flex-grow" aria-label="Permalink to &quot;flex-grow&quot;">​</a></h5><p>用来规定在 flex 容器中<strong>分配剩余空间</strong>的相对比例。</p><p><strong>注意:</strong> 因为是在分配剩余空间，所以不能简单理解为倍数，除非各个元素的宽度为 0，才可以直接理解为倍数。</p><blockquote><p>小考题：</p><p>比如容器宽度 110px，元素 A 的 flex-grow 为 1，元素 B 的 flex-grow 为 2，元素 A 和 B 的 flex-basis 都为 10px，那么最终元素 B 在容器中的宽度是多少？</p><p>计算：10px + 1x + 10px + 2x = 110px，算出 x 为 30px，所以元素 B 的宽度为 20px+2x，也就是 80px。</p></blockquote><h5 id="flex-shrink" tabindex="-1">flex-shrink <a class="header-anchor" href="#flex-shrink" aria-label="Permalink to &quot;flex-shrink&quot;">​</a></h5><p>指定了 flex 元素的收缩规则。</p><p>这个仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。</p><h5 id="flex-1" tabindex="-1">flex <a class="header-anchor" href="#flex-1" aria-label="Permalink to &quot;flex&quot;">​</a></h5><p>此属性是以下 CSS 属性的简写：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow" target="_blank" rel="noreferrer"><code>flex-grow</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink" target="_blank" rel="noreferrer"><code>flex-shrink</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis" target="_blank" rel="noreferrer"><code>flex-basis</code></a></li></ul><p><strong>默认值</strong></p><p><code>initial</code>: 相当于将属性设置为&quot;<code>flex: 0 1 auto</code>&quot;。</p><p><code>auto</code>: 相当于将属性设置为 &quot;<code>flex: 1 1 auto</code>&quot;.</p><p><code>none</code>: 相当于将属性设置为&quot;<code>flex: 0 0 auto</code>&quot;。</p><h4 id="元素间的对其和空间分配" tabindex="-1">元素间的对其和空间分配 <a class="header-anchor" href="#元素间的对其和空间分配" aria-label="Permalink to &quot;元素间的对其和空间分配&quot;">​</a></h4><h5 id="justify-content" tabindex="-1">justify-content <a class="header-anchor" href="#justify-content" aria-label="Permalink to &quot;justify-content&quot;">​</a></h5><p>使元素在主轴方向上对齐。</p><ul><li><code>stretch</code></li><li><code>flex-start</code></li><li><code>flex-end</code></li><li><code>center</code></li><li><code>space-between</code>: 把元素排列好之后的剩余空间拿出来，平均分配到元素之间，所以元素之间间隔相等</li><li><code>space-around</code>: 使每个元素的左右空间相等（头尾会共用一个空间距离）</li><li><code>space-evenly</code>: 使每个元素的左右空间相等（包括头尾也是一致的）</li></ul><h5 id="align-items" tabindex="-1">align-items <a class="header-anchor" href="#align-items" aria-label="Permalink to &quot;align-items&quot;">​</a></h5><p>可以使元素在交叉轴方向对齐。</p><ul><li><code>stretch</code>: 默认值，拉伸到最高元素的高度</li><li><code>flex-start</code>: 使 flex 元素按 flex 容器的顶部对齐</li><li><code>flex-end</code>: 使 flex 元素按 flex 容器的底部对齐</li><li><code>center</code>: 使 flex 元素按 flex 容器的中心对齐</li><li><code>baseline</code>: 和 start 类似，但是会以文字的基线对齐（这意味着文字大小不同时，会和 start 有明显不同）</li></ul><h5 id="align-content" tabindex="-1">align-content <a class="header-anchor" href="#align-content" aria-label="Permalink to &quot;align-content&quot;">​</a></h5><p>适用于允许换行后，如何在交叉轴上分布内容。</p><ul><li><code>normal</code>: 默认值</li><li><code>flex-start</code>: 交叉轴的开始对齐</li><li><code>flex-end</code>: 交叉轴的结束对齐</li><li><code>center</code></li><li><code>space-between</code></li><li><code>space-around</code></li><li><code>space-evenly</code></li></ul><h5 id="order" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/order" target="_blank" rel="noreferrer">order</a> <a class="header-anchor" href="#order" aria-label="Permalink to &quot;[order](https://developer.mozilla.org/zh-CN/docs/Web/CSS/order)&quot;">​</a></h5><p>规定了弹性容器中的可伸缩项目在布局时的顺序。</p><p>可以配合 flex 元素实现想要的元素顺序。</p><blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox" target="_blank" rel="noreferrer">MDN 文档</a></p></blockquote><h1 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h1><h3 id="表达式和参考符" tabindex="-1">表达式和参考符 <a class="header-anchor" href="#表达式和参考符" aria-label="Permalink to &quot;表达式和参考符&quot;">​</a></h3><p><strong>typeof</strong></p><p>用于判断变量的类型</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns string</span></span></code></pre></div><h3 id="内置对象" tabindex="-1">内置对象 <a class="header-anchor" href="#内置对象" aria-label="Permalink to &quot;内置对象&quot;">​</a></h3><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer">Array.prototype.map()</a></strong></p><p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> array1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pass a function to map</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map1);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: Array [2, 8, 18, 32]</span></span></code></pre></div>`,81),n=[t];function h(p,o,r,d,k,c){return a(),i("div",null,n)}const u=s(l,[["render",h]]);export{g as __pageData,u as default};
